1. pom.xml

Очень хорошо, что ты сразу стала настраивать проект как Maven. 
Перепроверь структуру каталогов. там у тебя в main/java затесались tests. 
Maven рассчитан на определенную структуру каталогов. Если структура отличается
 от той, что по умолчанию, то ее всю детально нужно описывать в pom.xml.
 
2. class Main
Здесь у тебя запускается проект. Это значит, что здесь ты создаешь и собираешь
 в кучу три части модели MVC. new View, new DBManager. Передаешь их в new MainController.
А  MainController начинает и поддерживает процесс работы приложения, отдавая команды 
для DBManager или View по мере необходимости. 
 DBManager и View следует рассматривать в качестве интерфейсов для MainControllera. 
С помощью которых он общается либо с БД , либо с пользователем.

В связи с вышесказанным 

    void runApp();  - MainController

    void connect(); - DBManager
    void showTables(); - DBManager
    void clear(); - DBManager
    void drop(); - DBManager
    void createTable(); - DBManager
	
3. На счет класса Query :
  - во-первых , я сам использую такую схему в которой выделил отдельный интерфейс 
  для генерации запросов в БД. Не все это понимают, но это жутко удобно ))) ;
  - во-вторых этот класс должен быть вспомогательным для комманд, тоесть контроллер вызывает
  нужную комманду, передает ей ссылки на view, dbManager, командную строку от пользователя 
  и забывает о том, что он что то делает.
  Дальше работает специальная команда: разбирает строку, формирует запрос(Query), отправляет в БД(DBManager), 
  получает данные, представляет их пользователю(View).   
  
4. Интерфейс IQuery - Я сейчас читаю книгу Мартин Р. - Чистый код. Создание, анализ и рефакторинг (2010).djvu.
Там не рекомендуется писать такие имена . Почитай, поймешь почему. Если что я могу сбросить файл.

5. Но, в целом, чувствуется рвение и желание побыстрее сделать проект. Поэтому мой совет: не торопись. 
